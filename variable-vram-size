diff --git a/hw/hw.h b/hw/hw.h
index f530f6f..6c0fdb0 100644
--- a/hw/hw.h
+++ b/hw/hw.h
@@ -67,4 +67,7 @@ int qemu_boot_set(const char *boot_devices);
 
 #endif
 
+void set_vga_ram_size(int size);
+int vga_ram_size(void);
+
 #endif
diff --git a/hw/vga.c b/hw/vga.c
index a8b79b0..84eccb5 100644
--- a/hw/vga.c
+++ b/hw/vga.c
@@ -590,23 +590,77 @@ static uint32_t vbe_ioport_read_index(void *opaque, uint32_t addr)
     return val;
 }
 
+typedef struct vga_ram_info {
+     int max_xres;
+     int max_yres;
+     int max_bpp;
+} vga_ram_info_t;
+
+static vga_ram_info_t vbe_ram_info(int ramsize)
+{
+    vga_ram_info_t s;
+    s.max_bpp = 32;
+
+    switch(ramsize) {
+    case 8 * 1024 * 1024:
+        s.max_xres = 1920;
+        s.max_yres = 1080;
+        break;
+    case 16 * 1024 * 1024:
+        s.max_xres = 2560;
+        s.max_yres = 1600;
+        break;
+    default:
+    case 32 * 1024 * 1024:
+        s.max_xres = 2560;
+        s.max_yres = 2048;
+        break;
+    }
+    return s;
+}
+
+#define VGA_RAM_SIZE 16 * 1024 * 1024
+static int vga_ram_sz = VGA_RAM_SIZE;
+void set_vga_ram_size(int size)
+{
+    const char *msg = NULL;
+
+    if (size < 8)
+        msg = "is too small";
+    else if (size > 512)
+        msg = "is too large";
+    else if (size != (size & ~(size - 1)))
+        msg = "is not a power of 2";
+    if (msg) {
+        fprintf(stderr, "VGA RAM size %d %s\n", size, msg);
+        exit(1);
+    }
+    vga_ram_sz = size * 1024 * 1024;
+}
+
+int vga_ram_size(void)
+{
+    return vga_ram_sz;
+}
+
 uint32_t vbe_ioport_read_data(void *opaque, uint32_t addr)
 {
     VGACommonState *s = opaque;
     uint32_t val;
+    vga_ram_info_t vs = vbe_ram_info(s->vram_size);
 
     if (s->vbe_index < VBE_DISPI_INDEX_NB) {
         if (s->vbe_regs[VBE_DISPI_INDEX_ENABLE] & VBE_DISPI_GETCAPS) {
             switch(s->vbe_index) {
                 /* XXX: do not hardcode ? */
             case VBE_DISPI_INDEX_XRES:
-                val = VBE_DISPI_MAX_XRES;
+                val = vs.max_xres;
                 break;
             case VBE_DISPI_INDEX_YRES:
-                val = VBE_DISPI_MAX_YRES;
+                val = vs.max_yres;
                 break;
             case VBE_DISPI_INDEX_BPP:
-                val = VBE_DISPI_MAX_BPP;
+                val = vs.max_bpp;
                 break;
             default:
                 val = s->vbe_regs[s->vbe_index];
@@ -635,6 +689,7 @@ void vbe_ioport_write_index(void *opaque, uint32_t addr, uint32_t val)
 void vbe_ioport_write_data(void *opaque, uint32_t addr, uint32_t val)
 {
     VGACommonState *s = opaque;
+    vga_ram_info_t vs = vbe_ram_info(s->vram_size);
 
     if (s->vbe_index <= VBE_DISPI_INDEX_NB) {
 #ifdef DEBUG_BOCHS_VBE
@@ -651,12 +706,12 @@ void vbe_ioport_write_data(void *opaque, uint32_t addr, uint32_t val)
             }
             break;
         case VBE_DISPI_INDEX_XRES:
-            if ((val <= VBE_DISPI_MAX_XRES) && ((val & 7) == 0)) {
+            if ((val <= vs.max_xres) && ((val & 7) == 0)) {
                 s->vbe_regs[s->vbe_index] = val;
             }
             break;
         case VBE_DISPI_INDEX_YRES:
-            if (val <= VBE_DISPI_MAX_YRES) {
+            if (val <= vs.max_yres) {
                 s->vbe_regs[s->vbe_index] = val;
             }
             break;
@@ -2274,12 +2329,7 @@ void vga_common_init(VGACommonState *s)
         expand4to8[i] = v;
     }
 
-    /* valid range: 1 MB -> 256 MB */
-    s->vram_size = 1024 * 1024;
-    while (s->vram_size < (s->vram_size_mb << 20) &&
-           s->vram_size < (256 << 20)) {
-        s->vram_size <<= 1;
-    }
+    s->vram_size = vga_ram_size();
     s->vram_size_mb = s->vram_size >> 20;
 
     s->is_vbe_vmstate = 1;
diff --git a/hw/vga_int.h b/hw/vga_int.h
index bcb738d..12c229a 100644
--- a/hw/vga_int.h
+++ b/hw/vga_int.h
@@ -25,6 +25,7 @@
 #include <hw/hw.h>
 #include "error.h"
 #include "memory.h"
+#include <console.h>
 
 #define ST01_V_RETRACE      0x08
 #define ST01_DISP_ENABLE    0x01
@@ -60,7 +61,7 @@
 #define VBE_DISPI_LFB_ENABLED           0x40
 #define VBE_DISPI_NOCLEARMEM            0x80
 
-#define VBE_DISPI_LFB_PHYSICAL_ADDRESS  0xE0000000
+#define VBE_DISPI_LFB_PHYSICAL_ADDRESS  0xF1000000
 
 #define CH_ATTR_SIZE (160 * 100)
 #define VGA_MAX_HEIGHT 2048
diff --git a/qemu-options.hx b/qemu-options.hx
index 9628316..ad19d47 100644
--- a/qemu-options.hx
+++ b/qemu-options.hx
@@ -21,6 +21,8 @@ DEF("screen", HAS_ARG, QEMU_OPTION_screen,
  "-screen                 Initial screen(s) configuration\n", QEMU_ARCH_ALL)
 DEF("orc-flags", HAS_ARG, QEMU_OPTION_orc_flags,
  "-orc-flags                 Value for orc_flags\n", QEMU_ARCH_ALL)
+DEF("vga-mem", HAS_ARG, QEMU_OPTION_vga_ram_size,
+ "-vga-mem megs              set virtual FB size to megs MB\n", QEMU_ARCH_ALL)
 
 DEFHEADING(Standard options:)
 STEXI
diff --git a/vl.c b/vl.c
index 2c47ee5..89f8942 100644
--- a/vl.c
+++ b/vl.c
@@ -3045,6 +3045,9 @@ int main(int argc, char **argv, char **envp)
                 vga_model = optarg;
                 default_vga = 0;
                 break;
+            case QEMU_OPTION_vga_ram_size:
+                set_vga_ram_size(atoi(optarg));
+                break;
             case QEMU_OPTION_g:
                 {
                     const char *p;
