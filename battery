diff --git a/hw/Makefile.objs b/hw/Makefile.objs
index 22cb42c..3d13f98 100644
--- a/hw/Makefile.objs
+++ b/hw/Makefile.objs
@@ -191,6 +191,7 @@ common-obj-$(CONFIG_BRLAPI) += baum.o
 # xen backend driver support
 common-obj-$(CONFIG_XEN_BACKEND) += xen_backend.o xen_devconfig.o
 common-obj-$(CONFIG_XEN_BACKEND) += xen_console.o xenfb.o xen_disk.o xen_nic.o
+obj-$(CONFIG_XEN) += battery_mgmt.o
 
 # Per-target files
 # virtio has to be here due to weird dependency between PCI and virtio-net.
diff --git a/hw/acpi_piix4.c b/hw/acpi_piix4.c
index 04448bd..d7478da 100644
--- a/hw/acpi_piix4.c
+++ b/hw/acpi_piix4.c
@@ -28,6 +28,8 @@
 #include "range.h"
 #include "ioport.h"
 #include "fw_cfg.h"
+#include "battery_mgmt.h"
+#include "xen.h"
 
 //#define DEBUG
 
@@ -449,7 +451,8 @@ static int piix4_pm_initfn(PCIDevice *dev)
     }
 
     /* APM */
-    apm_init(&s->apm, apm_ctrl_changed, s);
+    if (!xen_enabled()) 
+        apm_init(&s->apm, apm_ctrl_changed, s);
 
     register_ioport_write(ACPI_DBG_IO_ADDR, 4, 4, acpi_dbg_writel, s);
 
@@ -479,6 +482,9 @@ static int piix4_pm_initfn(PCIDevice *dev)
     qemu_register_reset(piix4_reset, s);
     piix4_acpi_system_hot_add_init(dev->bus, s);
 
+    if (xen_enabled())
+        battery_mgmt_init(dev);
+
     return 0;
 }
 
diff --git a/hw/battery_mgmt.c b/hw/battery_mgmt.c
new file mode 100644
index 0000000..e621ff3
--- /dev/null
+++ b/hw/battery_mgmt.c
@@ -0,0 +1,432 @@
+/*
+ * battery_mgmt.c
+ *
+ * Copyright (c) 2008  Kamala Narasimhan
+ * Copyright (c) 2008  Citrix Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* Battery Management Implementation. Implements the following -
+ *  1) Check xenstore for pm implementation type - Pass-through or non-passthrough
+ *  2) Map appropriate ports for pass-through battery information
+ *  3) Register for appropriate ports and respond to those port read/writes for
+ *     non-passthrough implementation
+ */
+
+#include "hw.h"
+#include "pc.h"
+#include "qemu-log.h"
+#include "isa.h" //register_ioport_read declaration
+#include "battery_mgmt.h"
+#include "xen_backend.h"
+#include "xenctrl.h"
+#include <time.h>
+
+#ifndef CONFIG_NO_BATTERY_MGMT
+
+#include <sys/io.h>
+
+//#define BATTERY_MGMT_DEBUG
+//#define BATTERY_MGMT_DEBUG_EXT
+
+#define BATTERY_PORT_1 0xb2
+#define BATTERY_PORT_2 0x86
+#define BATTERY_PORT_3 0x88
+
+#define BATTERY_OP_INIT            0x7b
+#define BATTERY_OP_SET_INFO_TYPE   0x7c /*BIF or BST */
+#define BATTERY_OP_GET_DATA_LENGTH 0x79
+#define BATTERY_OP_GET_DATA        0x7d
+
+#ifdef BATTERY_MGMT_DEBUG_EXT
+    #define BATTERY_DBG_PORT_1 0xB040
+    #define BATTERY_DBG_PORT_2 0xB044
+    #define BATTERY_DBG_PORT_3 0xB046
+    #define BATTERY_DBG_PORT_4 0xB048
+    static int monitor_battery_port = 0;
+#endif
+
+static enum POWER_MGMT_MODE power_mgmt_mode = PM_MODE_NONE;
+static battery_state_info battery_info;
+static char *bif_cache[MAX_BATTERIES];
+static uint32_t battery_changed = 0;
+
+#if 0
+static int battery_type_valid(int type)
+{
+        return (type > BATT_NONE && type < BATT_MAX);
+}
+#endif
+
+static int is_battery_pt_feasible(void)
+{
+    int val;
+
+    if ( (ioperm(BATTERY_PORT_1, 1, 1) != 0) ||
+         (ioperm(BATTERY_PORT_2, 1, 1) != 0) )
+        return 0;
+
+    outb(BATTERY_OP_INIT, BATTERY_PORT_1);
+    outb(1 /*BIF*/, BATTERY_PORT_2);
+    outb(BATTERY_OP_SET_INFO_TYPE, BATTERY_PORT_1);
+    outb(0, BATTERY_PORT_2);
+    outb(BATTERY_OP_GET_DATA_LENGTH, BATTERY_PORT_1);
+    val = inb(BATTERY_PORT_2);
+
+    ioperm(BATTERY_PORT_1, 1, 0);
+    ioperm(BATTERY_PORT_2, 1, 0);
+    if ( !val )
+        qemu_log("xen_extended_power_mgmt set to 1 but this mode is incomapatible with the current firmware!\n");
+    return val;
+}
+
+static void battery_mgmt_pt_mode_init(void)
+{
+    if ( xen_xc == -1 ) 
+    {
+        qemu_log("%s: xc_interface_open failed\n", __FUNCTION__);
+        return;
+    }
+
+    if ( xc_domain_ioport_mapping(xen_xc, xen_domid, BATTERY_PORT_1, BATTERY_PORT_1, 0x2, 1) != 0 ) 
+       qemu_log("Failed to map port %x to guest\n", BATTERY_PORT_1);
+
+    if ( xc_domain_ioport_mapping(xen_xc, xen_domid, BATTERY_PORT_2, BATTERY_PORT_2, 0x1, 1) != 0 ) 
+        qemu_log("Failed to map port %x to guest\n", BATTERY_PORT_2);
+}
+
+#ifdef BATTERY_MGMT_DEBUG_EXT
+
+static void battery_dbg_monitor(void *opaque, uint32_t addr, uint32_t val)
+{   
+    if (val > 0x80)
+        qemu_log("Issued notify %x on all \\SB.BATx", val);
+    else
+        monitor_battery_port = !monitor_battery_port;
+}
+
+static void battery_dbg_port_b2_input(void *opaque, uint32_t addr, uint32_t val)
+{
+    if ( monitor_battery_port ) 
+        qemu_log("Input value to battery port 0xb2 - %x. ", val);
+}
+
+static void battery_dbg_port_86_output(void *opaque, uint32_t addr, uint32_t val)
+{
+    if ( monitor_battery_port ) 
+        qemu_log("Output value from battery port 0x86 - %x\n", val);
+}
+    
+static void battery_dbg_port_86_input(void *opaque, uint32_t addr, uint32_t val)
+{
+    if ( monitor_battery_port ) 
+        qemu_log("port 0x86 - %x. ", val); 
+}
+#endif //BATTERY_MGMT_DEBUG_EXT
+
+static void get_battery_data_from_xenstore( void )
+{
+    char *data = NULL;
+    char key[6];
+    int index = battery_info.bat_index;
+
+    /* Ensure string is NUL terminated */
+    key[sizeof(key)-1] = '\0';
+
+    if ( battery_info.type == BIF ) {
+        data = strdup(bif_cache[index]);
+    } else if ( battery_info.type == BST ) {
+        snprintf(key, sizeof(key)-1, "bst%d", index);
+        data = xenstore_read_str("/pm", key);
+    } else if ( battery_info.type == PSR ) {
+        data = xenstore_read_str("/pm", "psr");
+        if (data)
+            battery_info.port_86_val = atoi(data);
+#ifdef BATTERY_MGMT_DEBUG
+        qemu_log("PSR: Got from xenstore: %s", data);
+#endif
+        return;
+    }
+
+    /* 
+     * If xenpmd isn't running, or there's something wrong with the xenstore
+     *   values, a Windows guest will spin forever in a tight loop trying to
+     *   get the bogus data, bogging down the entire platform. Make sure that
+     *   even if the info is stale, there's at least something to chew on
+     */
+    if (data) {
+        if (battery_info.battery_data)
+            g_free(battery_info.battery_data);
+        battery_info.battery_data = data;
+    }
+    battery_info.current_index = 0;
+
+#ifdef BATTERY_MGMT_DEBUG
+    qemu_log("BAT%d: Got %d from xenstore: %s", index, battery_info.type, battery_info.battery_data);
+#endif
+}
+
+static void write_battery_data_to_port(void)
+{
+    char temp[3];
+    char *data;
+
+    if ( battery_info.battery_data == NULL ) 
+        return;
+
+    data = battery_info.battery_data + battery_info.current_index;
+    //KN: @Todo - Revisit the hard coding below and add bounds checking
+    // for current index though the querying software is not likely to 
+    // ask for more than what we provide as initial data length.
+    if ( ( battery_info.current_index <= 74 ) ||
+         (( battery_info.current_index > 74 ) && (*(data - 1) == '\n' )) ) 
+    {
+        snprintf(temp, 3, "%s", data);
+        battery_info.port_86_val = (uint8_t)strtoull(temp, NULL, 16);
+        battery_info.current_index+=2;
+    } else 
+    {
+        if ( *data == '\n' )
+            battery_info.port_86_val = 0;
+        else
+            battery_info.port_86_val = *data;
+        battery_info.current_index+=1;
+    }
+
+#ifdef BATTERY_MGMT_DEBUG_EX
+    qemu_log("Bat%d: Wrote %x to port 0x86\n", 
+             battery_info.bat_index, battery_info.port_86_val);
+#endif
+    return;
+}  
+
+static void battery_port_1_writeb(void *opaque, uint32_t addr, uint32_t val)
+{
+    switch (val) 
+    {
+        case BATTERY_OP_GET_DATA_LENGTH:
+            battery_info.current_index = 0;
+            write_battery_data_to_port();
+            battery_info.port_b2_val = 0;
+            break;
+        case BATTERY_OP_INIT:
+            battery_info.type = BATT_NONE;
+            if ( battery_info.battery_data != 0 )
+                g_free(battery_info.battery_data);
+            battery_info.battery_data = 0; 
+            battery_info.current_index = 0;
+            battery_info.bat_index = 0;
+            battery_info.port_b2_val = 0;
+            break;
+        case BATTERY_OP_SET_INFO_TYPE:
+            if ( battery_info.type == BATT_NONE ) 
+            {
+                if ( battery_info.port_86_val == 1 ) 
+                    battery_info.type = BIF; 
+                else if ( battery_info.port_86_val == 2 ) 
+                {
+                    battery_info.type = BST;
+                } 
+                else if ( battery_info.port_86_val == 3 )
+                {
+                    battery_info.type = PSR;
+
+                    /* Now we have enough info to fetch values from xenstore */
+                    get_battery_data_from_xenstore();
+                }
+            }
+            else {
+                /* If type is set then value is battery index */
+                battery_info.bat_index = battery_info.port_86_val - 1;
+                if (battery_info.bat_index >= MAX_BATTERIES)
+                    battery_info.bat_index = 0;
+
+                /* Now we have enough info to fetch values from xenstore */
+                get_battery_data_from_xenstore();
+            }
+            battery_info.port_b2_val = 0;
+            break;
+        case BATTERY_OP_GET_DATA:
+            write_battery_data_to_port();
+            battery_info.port_b2_val = 0;
+            break;
+        default:
+            break;
+    }
+    return;
+}
+
+static uint32_t battery_port_1_readb(void *opaque, uint32_t addr)
+{
+    return battery_info.port_b2_val;
+}
+
+static void battery_port_2_writeb(void *opaque, uint32_t addr, uint32_t val)
+{
+    battery_info.port_86_val = val;
+}
+
+static uint32_t battery_port_2_readb(void *opaque, uint32_t addr)
+{
+    return battery_info.port_86_val;
+}
+
+static void get_xs_battery_info(int index)
+{
+    char *val;
+    char key[6];
+
+    key[sizeof(key)-1] = '\0';
+
+    snprintf(key, sizeof(key)-1, "bif%d", index);
+    val = xenstore_read_str("/pm", key);
+
+    /* Check if battery info has changed */
+    if ((!val ^ !bif_cache[index]) ||
+        (val && strcmp(val, bif_cache[index]))) {
+#ifdef BATTERY_MGMT_DEBUG
+      qemu_log("Bat%d: battery has changed\n", 
+               battery_info.bat_index);
+#endif
+        battery_changed |= (1 << index);
+
+        /* replace current value with new */
+        g_free(bif_cache[index]);
+        bif_cache[index] = val;
+    }
+}
+
+static int has_xs_battery_info(int index)
+{
+    int i;
+
+    /* First, update information for all batteries and set changed flag */
+    for (i = 0; i < MAX_BATTERIES; i++)
+        get_xs_battery_info(i);
+
+    /* Now return flag indicating if specified battery exists */
+    return (!!bif_cache[index]);
+}
+
+static void battery_port_3_writeb(void *opaque, uint32_t addr, uint32_t val)
+{
+        battery_info.status_index = val - 1;
+        if (battery_info.status_index >= MAX_BATTERIES)
+                battery_info.status_index = 0;
+}
+
+static uint32_t battery_port_3_readb(void *opaque, uint32_t addr)
+{
+    int ret = 0x00;
+
+    if ( power_mgmt_mode == PM_MODE_PT || power_mgmt_mode == PM_MODE_NON_PT ) {
+        if ( (power_mgmt_mode == PM_MODE_PT) && (is_battery_pt_feasible() == 0) )
+            ret = 0x0F;
+        else {
+            if (has_xs_battery_info(battery_info.status_index))
+                ret |= 0x1F;      
+
+            /*
+             * Report change if ANY battery has changed - this is
+             * necessary to handling plugging a battery in as Windows
+             * will not poll status for an empty slot unless a
+             * Notify() is done - ASL will generate Notify(0x81) for
+             * all known batteries if this bit is set
+             */
+            if (battery_changed) {
+                battery_changed = 0;
+                ret |= 0x80;
+            }
+        }
+    }
+
+#ifdef BATTERY_MGMT_DEBUG
+    qemu_log("Bat%d: Battery status: %x\n", 
+             battery_info.status_index, ret);
+#endif
+    return ret;
+}
+
+static void battery_mgmt_non_pt_mode_init(PCIDevice *device)
+{
+    memset(&battery_info, 0, sizeof(battery_state_info));
+    register_ioport_read(BATTERY_PORT_1, 2, 1, battery_port_1_readb, device);
+    register_ioport_write(BATTERY_PORT_1, 2, 1, battery_port_1_writeb, device);
+    register_ioport_read(BATTERY_PORT_2, 1, 1, battery_port_2_readb, device);
+    register_ioport_write(BATTERY_PORT_2, 1, 1, battery_port_2_writeb, device);
+
+#ifdef BATTERY_MGMT_DEBUG_EXT
+    register_ioport_write(BATTERY_DBG_PORT_1, 1, 1, battery_dbg_monitor , device);
+    register_ioport_write(BATTERY_DBG_PORT_2, 1, 1, battery_dbg_port_b2_input, device);
+    register_ioport_write(BATTERY_DBG_PORT_3, 1, 1, battery_dbg_port_86_output, device);
+    register_ioport_write(BATTERY_DBG_PORT_4, 1, 1, battery_dbg_port_86_input, device);
+#endif
+}
+ 
+void battery_mgmt_init(PCIDevice *device)
+{
+    char *dom_path;
+    char *mode_buffer = NULL;
+
+    if (xenstore == NULL)
+        xenstore = xs_daemon_open();
+
+    //xen_extended_power_mgmt xenstore entry indicates whether or not extended power
+    //management support is requested for the hvm guest.  Extended power management
+    //support includes power management support beyond S3, S4, S5.  A value of 1
+    //indicates pass-through pm support where upon pm resources are mapped to the guest
+    //as appropriate where as a value of 2 as set in non pass-through mode, requires qemu
+    //to take the onus of responding to relevant pm port reads/writes.
+    dom_path = xs_get_domain_path(xenstore, xen_domid);
+    mode_buffer = xenstore_read_str(dom_path, "device-model/xen_extended_power_mgmt");
+    free(dom_path);
+    if ( mode_buffer == NULL ) 
+    {
+#ifdef BATTERY_MGMT_DEBUG
+        qemu_log("Xenpm mode not set\n");
+#endif
+        power_mgmt_mode = PM_MODE_NON_PT;
+    } else {
+        power_mgmt_mode = (enum POWER_MGMT_MODE) strtoull(mode_buffer, NULL, 10);
+        g_free(mode_buffer);
+    }
+
+    switch ( power_mgmt_mode ) 
+    {
+        case PM_MODE_PT:
+            battery_mgmt_pt_mode_init();
+            break;
+        case PM_MODE_NON_PT:
+            battery_mgmt_non_pt_mode_init(device);
+            break;
+        case PM_MODE_NONE:
+        default:
+            return;
+    }
+
+    register_ioport_read(BATTERY_PORT_3, 1, 1, battery_port_3_readb, device);
+    register_ioport_write(BATTERY_PORT_3, 1, 1, battery_port_3_writeb, device);
+
+#ifdef BATTERY_MGMT_DEBUG
+    qemu_log("Power management mode set to - %d\n", power_mgmt_mode);
+#endif    
+}
+
+#else
+
+void battery_mgmt_init(PCIDevice *device) { }
+
+#endif
diff --git a/hw/battery_mgmt.h b/hw/battery_mgmt.h
new file mode 100644
index 0000000..75259eb
--- /dev/null
+++ b/hw/battery_mgmt.h
@@ -0,0 +1,49 @@
+/*
+ * battery_mgmt.h
+ *
+ * Copyright (c) 2008  Kamala Narasimhan
+ * Copyright (c) 2008  Citrix Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef _BATTERY_MGMT_H
+#define _BATTERY_MGMT_H
+
+#ifdef CONFIG_STUBDOM
+#define CONFIG_NO_BATTERY_MGMT
+#endif
+#ifdef _BSD /* There's no ioperm(), outb(), inb() */
+#define CONFIG_NO_BATTERY_MGMT
+#endif
+
+#define MAX_BATTERIES 4
+
+enum POWER_MGMT_MODE { PM_MODE_NONE = 0, PM_MODE_PT, PM_MODE_NON_PT };
+enum BATTERY_INFO_TYPE { BATT_NONE, BIF, BST, PSR, BATT_MAX };
+typedef struct battery_state_info {
+    enum BATTERY_INFO_TYPE type;
+    uint8_t port_b2_val;
+    uint8_t port_86_val;
+    uint8_t port_66_val;
+    char *battery_data;
+    uint8_t current_index;
+    uint8_t bat_index;
+    uint8_t status_index;
+} battery_state_info;
+
+void battery_mgmt_init(PCIDevice *device);
+
+#endif
